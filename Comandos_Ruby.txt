cdcomandos
rvm list
rvm use 2.7.2
rvm gemset list
rvm gemset use demohh
comando pwd: indica en qué carpeta estás.

crear aplicacion: 
rails new rails_demohh
Borrar la carpeta .git dentro de la carpeta del proyecto


cd rails_demohh
sudo apt install tree
Mostrar el listado en forma de árbol: tree -L 2 -I node_modules
cat .ruby -version
volver a especificar el gemset:
rvm gemset list
rvm gemset use demohh
rails dbconsole: entrando a sqlite
control + D para salir de sqlite
Inicializa el Servidor: rails server
control + C para detener el servidor
rails server --help
rails server -b 0.0.0.0 para acceder externamente.
pwd
Abrir Visual Studio Code: code .
En VS-Code escribir en el archivo .ruby-version:
ruby-2.7.2@demohh

En la terminal: rails generate controller Say hello goodbye
Cuando dice "Editar el template" se refiere a editar la vista, carpeta "views"
Para generar una clave ssh para hacer login en github.
Obtener desde consola la clave ssh:
cat /home/usuario/.ssh/id_rsa.pub

Borrar directorio .git de la carpeta rails_demohh:
rm -r .git
Conectarlo con el github.
En la consola: irb y escribir "Hola mundo."
Cerrar la consola interactiva: Ctrl+D

Crear carpeta ruby dentro de la carpeta curso
En la consola Terminator, entrar a la carpeta ruby y escribir: code . (esto abre el IDE Visual Studio Code).

Para hacer comentarios de una línea sobre código: Ctrl+Shift+/

Probando subir un archivo txt desde git.

Clase Viernes.
Dentro de Usuario/curso crear un gemset llamado depot: rvm gemset create depot
Usar este gemset: rvm gemset use depot
Instalar rails: gem install rails -v 6.1.7
Ver lista de gemas: gem list
Verificar versión de Rails: rails -v
Para cambiar el motor de BD de sqlite3 (predeterminado) a PostgreSQL.
Para ver las opciones para cambiar la configuración: rails new --help
Crear nuevo proyecto llamado depot con PostgreSQL: rails new depot --database=postgresql
Usar docker: https://hub.docker.com y buscar la imagen de postgresql
Ver imagenes de docker: docker images
Crear una red llamada dev: 
docker network ls
docker network create dev
Ejecutar un contenedor docker con la imagen de postgresql y la red creada:
docker run --name postgres --network dev -p 5432:5432 -e POSTGRES_PASSWORD=123 -d postgres:10.21
Ejecutar la imagen de pgadmin4:
docker run --network dev -p 80:80 -e 'PGADMIN_DEFAULT_EMAIL=admin@depot.com' -e 'PGADMIN_DEFAULT_PASSWORD=123' -d dpage/pgadmin4
En Firefox: localhost:80 e ingresa al portal con el usuario y contraseña configurada.

Add new Server: 
Nombre de la BD: localhost
Host: postgresql (ponerle el nombre del contenedor)
Port: 5432
Maintenance database: postgres
Username: postgres
Password: 123

En la terminal:
docker ps
docker rm -f [ID o nombres del contenedor] borra los contenedores.
Levantar el docker compose para crear los contenedores: docker compose up -d
Eliminar los contenedores: docker compose down

En VSCode:
En el archivo .ruby-version escribir: ruby-2.6.6@depot

En la terminal:
rails generate scaffold Product title:string description:text image_url:string price:decimal

rails generate scaffold Book title:string category:string year:integer

rails db:setup
rails db:create
rails s
rails db:migrate:status
rails db:migrate
rails db:migrate:status

rails server (iniciar el servidor)
Entrar el servidor: http://127.0.0.1:3000
Detener el servidor: Ctrl+C

Ejecutar en la terminal: rails db:migrate

rails db:migrate:status
rails db:rollback

Hacer cambios en VSCode en el archivo /db/migrate/xxx_create_product.rb
En la consola, ejecutar la migración: rails db:migrate

Crear restriccion de unicidad:
rails generate migration AddUniquenessToProductTitle
Editar el archivo en db/migrate/xxx_add_uniqueness_to_product_title

En Consola: rails db:migrate

Intalar bootstrap, en la terminal: sudo npm install -g sass
En la consola entramos a la carpeta sass

sass sass/styles.scss stylesheets/styles.css

Se instala bootstrap en nuestra aplicación a través de gemas.

Insertar en GemFile: gem 'bootstrap', '~> 5.2.2'
En la consola escribir: bundle install
En el proyecto editar el archivo /stylesheets/application.css cambiar la extensión a .scss
En el mismo archivo borrar las últimas 2 líneas e insertar: 
// Custom bootstrap variables must be set or imported *before* bootstrap.
@import "bootstrap";

En la consola, ejecutar el servidor: rails server o rails s

rails db:drop
rails db:setup
yarn install #Instalar dependencias que no se suben al git.

Suits para Test: rspec.info
Buscamos la pagina de github de rspec-rails

https://github.com/rspec/rspec-rails #bajar en la descripcion
Copiar: gem 'rspec-rails', '~> 6.0.0' y pegarlo en el archivo GemFile debajo de development y test.
Luego en la consola ejecutar: bundle install
Ejecutar: rails generate rspec:install
Ejecutar: rspec spec #Para confirmar que se instaló bien, corre los ejemplos que tenemos programados.

Clase Martes 01-11-2022.
Instalar gema en el archivo GemFile, dentor del grupo development, test:
gem 'factory_bot_rails'
En Consola escribir bundle install

https://github.com/thoughtbot/factory_bot_rails #Buscar subtítulo Configuration
https://github.com/thoughtbot/factory_bot/blob/master/GETTING_STARTED.md#configure-your-test-suite
Modificar el archivo rails_helper.rb Quitar el # en Dir[Rails.root.join('spec', 'support', '**', '*.rb')].sort.each { |f| require f }
En consola: rspec

Generar nuevo controlador para creare la página de inicio
En Consola: rails generate controller Store index
Editar el archivo: routes.rb

En el git del curso, entrar a la rama 7, copiar el archivo depot/app/views/store/index.html.erb

Para precargar el archivo seeds.rb
Luego en consola ejecutar: rails db:seed

Buscar más información de los métodos disponibles en: guides.rubyonrails.org --> Rails 6.0 Link Query Interface

Crear el carrito.
Encender el docker de postgresql
rails generate scaffold Cart
rails db:migrate:status
rails db:migrate

Otro scaffold para obtener el detalle de los productos del carrito
rails generate scaffold LineItem product:references cart:belongs_to

rails destroy scaffold l_ine_item_spec.rb
Borrar desde el proyecto el archivo /db/migrate/xxxxxx_l_ine_item_spec.rb

Clase del Jueves 03-11-2022.
Para agregar un nuevo campo a una tabla.
rails generate migration add_quantity_to_line_items quantity:integer
rails db:migrate:status
rails db:migrate

rails generate migration combine_items_in_cart

En consola: rails console
Escribir: Cart.destroy_all
En consola: exit

rails db:migrate:status
rails db:rollback
rails db:migrate:status
rails db:migrate

Detener el servidor: Ctrl+C
Reset la BD: rails db:reset
rails s

Agregar autenticación con devise
https://github.com/heartcombo/devise

Agregar el campo name a usuario
En Consola: 
rails generate scaffold User name:string
rails db:migrate:status
rails db:migrate

Agregar en Gemfile: gem 'devise'
En la terminal: 
bundle install
rails generate devise:install
rails generate devise User
rails db:migrate

Para agregar auditoria.
Agregar en Gemfile: gem "audited", "~> 5.0"
bundle install
rails generate audited:install
rake db:migrate

Agregar en product.rb
audited

Agregar en ApplicationController.rb
before_action :authenticate_user!

Agregar en StoreController.rb
skip_before_action :authenticate_user!

Para iniciar contenedor de postgres desde la terminar:
Ubicarse en la carpeta raiz del proyecto y escribir en consola:
docker compose up -d


